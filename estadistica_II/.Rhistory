# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} else {
reg2 <- lm(vardep2 ~ tratamiento)
if (summary(reg2)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} else {
reg3 <- lm(vardep3 ~ tratamiento)
if (summary(reg3)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} else {
reg4 <- lm(vardep4 ~ tratamiento)
if (summary(reg4)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} else {
reg5 <- lm(vardep5 ~ tratamiento)
if (summary(reg5)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
}
}
}
}
}
}
print(bingo / total_sim)
rm(list=ls()) # Limpia la lista de objetos
#Librerias necesarias
#install.packages("dplyr")
library(dplyr)
#install.packages("ggplot2")
library(ggplot2)
######P1.	Utilice el código borrando la sección en rojo y responda:####
#¿Qué representa el resultado que arroja el código? Explique brevemente.
# Definir número de observaciones
num_obs <- 1000
# Muchos experimentos…
total_sim <- 1000
bingo <- 0
for (simul in 1:total_sim) {
# Llegan participantes:
participant <- 1:num_obs
# Les damos un tratamiento en forma aleatoria:
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Tomamos sus reacciones (cree las variables dependientes que necesite):
vardep1 <- qnorm(runif(num_obs))
vardep2 <- qnorm(runif(num_obs))
vardep3 <- qnorm(runif(num_obs))
vardep4 <- qnorm(runif(num_obs))
vardep5 <- qnorm(runif(num_obs))
# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
}
}
print(bingo / total_sim)
#####P2 Utilice el código completo y responda:#####
# ¿Qué representa el resultado que arroja el código? Explique brevemente. [20 puntos]
# Definir número de observaciones
num_obs <- 1000
# Muchos experimentos…
total_sim <- 1000
bingo <- 0
for (simul in 1:total_sim) {
# Llegan participantes:
participant <- 1:num_obs
# Les damos un tratamiento en forma aleatoria:
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Tomamos sus reacciones (cree las variables dependientes que necesite):
vardep1 <- qnorm(runif(num_obs))
vardep2 <- qnorm(runif(num_obs))
vardep3 <- qnorm(runif(num_obs))
vardep4 <- qnorm(runif(num_obs))
vardep5 <- qnorm(runif(num_obs))
# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} else
#   {
#   reg2 <- lm(vardep2 ~ tratamiento)
#   if (summary(reg2)$coefficients[2, 4] < 0.05) {
#     bingo <- bingo + 1
#   } else {
#     reg3 <- lm(vardep3 ~ tratamiento)
#     if (summary(reg3)$coefficients[2, 4] < 0.05) {
#       bingo <- bingo + 1
#     } else {
#       reg4 <- lm(vardep4 ~ tratamiento)
#       if (summary(reg4)$coefficients[2, 4] < 0.05) {
#         bingo <- bingo + 1
#       } else {
#         reg5 <- lm(vardep5 ~ tratamiento)
#         if (summary(reg5)$coefficients[2, 4] < 0.05) {
#           bingo <- bingo + 1
#         }
#       }
#     }
#   }
# }
}
source("~/Desktop/Programación/estadistica_II/codigo_lab_1.r", echo=TRUE)
rm(list=ls()) # Limpia la lista de objetos
#Librerias necesarias
#install.packages("dplyr")
library(dplyr)
#install.packages("ggplot2")
library(ggplot2)
######P1.	Utilice el código borrando la sección en rojo y responda:####
#¿Qué representa el resultado que arroja el código? Explique brevemente.
# Definir número de observaciones
num_obs <- 1000
# Muchos experimentos…
total_sim <- 1000
bingo <- 0
for (simul in 1:total_sim) {
# Llegan participantes:
participant <- 1:num_obs
# Les damos un tratamiento en forma aleatoria:
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Tomamos sus reacciones (cree las variables dependientes que necesite):
vardep1 <- qnorm(runif(num_obs))
vardep2 <- qnorm(runif(num_obs))
vardep3 <- qnorm(runif(num_obs))
vardep4 <- qnorm(runif(num_obs))
vardep5 <- qnorm(runif(num_obs))
# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
}
}
print(bingo / total_sim)
#####P2 Utilice el código completo y responda:#####
# ¿Qué representa el resultado que arroja el código? Explique brevemente. [20 puntos]
# Definir número de observaciones
num_obs <- 1000
# Muchos experimentos…
total_sim <- 1000
bingo <- 0
for (simul in 1:total_sim) {
# Llegan participantes:
participant <- 1:num_obs
# Les damos un tratamiento en forma aleatoria:
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Tomamos sus reacciones (cree las variables dependientes que necesite):
vardep1 <- qnorm(runif(num_obs))
vardep2 <- qnorm(runif(num_obs))
vardep3 <- qnorm(runif(num_obs))
vardep4 <- qnorm(runif(num_obs))
vardep5 <- qnorm(runif(num_obs))
# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} # else {
#   reg2 <- lm(vardep2 ~ tratamiento)
#   if (summary(reg2)$coefficients[2, 4] < 0.05) {
#     bingo <- bingo + 1
#   } else {
#     reg3 <- lm(vardep3 ~ tratamiento)
#     if (summary(reg3)$coefficients[2, 4] < 0.05) {
#       bingo <- bingo + 1
#     } else {
#       reg4 <- lm(vardep4 ~ tratamiento)
#       if (summary(reg4)$coefficients[2, 4] < 0.05) {
#         bingo <- bingo + 1
#       } else {
#         reg5 <- lm(vardep5 ~ tratamiento)
#         if (summary(reg5)$coefficients[2, 4] < 0.05) {
#           bingo <- bingo + 1
#         }
#       }
#     }
#   }
# }
}
print(bingo / total_sim)
rm(list=ls()) # Limpia la lista de objetos
#Librerias necesarias
#install.packages("dplyr")
library(dplyr)
#install.packages("ggplot2")
library(ggplot2)
######P1.	Utilice el código borrando la sección en rojo y responda:####
#¿Qué representa el resultado que arroja el código? Explique brevemente.
# Definir número de observaciones
num_obs <- 1000
# Muchos experimentos…
total_sim <- 1000
bingo <- 0
for (simul in 1:total_sim) {
# Llegan participantes:
participant <- 1:num_obs
# Les damos un tratamiento en forma aleatoria:
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Tomamos sus reacciones (cree las variables dependientes que necesite):
vardep1 <- qnorm(runif(num_obs))
vardep2 <- qnorm(runif(num_obs))
vardep3 <- qnorm(runif(num_obs))
vardep4 <- qnorm(runif(num_obs))
vardep5 <- qnorm(runif(num_obs))
# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
}
}
print(bingo / total_sim)
#####P2 Utilice el código completo y responda:#####
# ¿Qué representa el resultado que arroja el código? Explique brevemente. [20 puntos]
# Definir número de observaciones
num_obs <- 1000
# Muchos experimentos…
total_sim <- 1000
bingo <- 0
for (simul in 1:total_sim) {
# Llegan participantes:
participant <- 1:num_obs
# Les damos un tratamiento en forma aleatoria:
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Tomamos sus reacciones (cree las variables dependientes que necesite):
vardep1 <- qnorm(runif(num_obs))
vardep2 <- qnorm(runif(num_obs))
vardep3 <- qnorm(runif(num_obs))
vardep4 <- qnorm(runif(num_obs))
vardep5 <- qnorm(runif(num_obs))
# Veamos si hay diferencias (agregue “else if” para considerar otras variables dependientes.)
# Sólo basta que una sea “significativa”.
reg1 <- lm(vardep1 ~ tratamiento)
if (summary(reg1)$coefficients[2, 4] < 0.05) {
bingo <- bingo + 1
} # else {
#   reg2 <- lm(vardep2 ~ tratamiento)
#   if (summary(reg2)$coefficients[2, 4] < 0.05) {
#     bingo <- bingo + 1
#   } else {
#     reg3 <- lm(vardep3 ~ tratamiento)
#     if (summary(reg3)$coefficients[2, 4] < 0.05) {
#       bingo <- bingo + 1
#     } else {
#       reg4 <- lm(vardep4 ~ tratamiento)
#       if (summary(reg4)$coefficients[2, 4] < 0.05) {
#         bingo <- bingo + 1
#       } else {
#         reg5 <- lm(vardep5 ~ tratamiento)
#         if (summary(reg5)$coefficients[2, 4] < 0.05) {
#           bingo <- bingo + 1
#         }
#       }
#     }
#   }
# }
}
print(bingo / total_sim)
# Limpia la lista de objetos
rm(list = ls())
# Librerías necesarias
library(dplyr)
library(ggplot2)
# Definir número de observaciones y número total de simulaciones
num_obs <- 1000
total_sim <- 1000
# Vector para almacenar el porcentaje de falsos positivos para cada número de variables dependientes
falsos_positivos <- numeric(10)
for (num_vars in 1:10) {
bingo <- 0
for (simul in 1:total_sim) {
# Asignación de tratamiento aleatorio
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Generación de variables dependientes
vardep <- replicate(num_vars, qnorm(runif(num_obs)), simplify = FALSE)
# Comprobación de significancia en múltiples variables dependientes
significativo <- FALSE
for (v in vardep) {
reg <- lm(v ~ tratamiento)
if (summary(reg)$coefficients[2, 4] < 0.05) {
significativo <- TRUE
break
}
}
if (significativo) {
bingo <- bingo + 1
}
}
# Cálculo del porcentaje de falsos positivos para el número actual de variables dependientes
falsos_positivos[num_vars] <- bingo / total_sim * 100
}
# Crear un dataframe para ggplot
df_resultados <- data.frame(
NumVariables = 1:10,
PorcentajeFalsosPositivos = falsos_positivos
)
# Gráfico del porcentaje de falsos positivos
ggplot(df_resultados, aes(x = NumVariables, y = PorcentajeFalsosPositivos)) +
geom_line() +
geom_point() +
labs(
title = "Porcentaje de Falsos Positivos en función del Número de Variables Dependientes",
x = "Número de Variables Dependientes",
y = "Porcentaje de Falsos Positivos"
) +
theme_minimal()
# Gráfico del porcentaje de falsos positivos
ggplot(df_resultados, aes(x = NumVariables, y = PorcentajeFalsosPositivos)) +
geom_line() +
geom_point() +
labs(
title = "Porcentaje de Falsos Positivos en función del Número de Variables Dependientes",
x = "Número de Variables Dependientes",
y = "Porcentaje de Falsos Positivos"
) +
theme_minimal()
# Limpia la lista de objetos
rm(list = ls())
# Librerías necesarias
library(dplyr)
library(ggplot2)
# Definir número de observaciones y número total de simulaciones
num_obs <- 1000
total_sim <- 1000
# Vector para almacenar el porcentaje de falsos positivos para cada número de variables dependientes
falsos_positivos <- numeric(10)
for (num_vars in 1:10) {
bingo <- 0
for (simul in 1:total_sim) {
# Asignación de tratamiento aleatorio
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Generación de variables dependientes
vardep <- replicate(num_vars, qnorm(runif(num_obs)), simplify = FALSE)
# Comprobación de significancia en múltiples variables dependientes
significativo <- FALSE
for (v in vardep) {
reg <- lm(v ~ tratamiento)
if (summary(reg)$coefficients[2, 4] < 0.05) {
significativo <- TRUE
break
}
}
if (significativo) {
bingo <- bingo + 1
}
}
# Cálculo del porcentaje de falsos positivos para el número actual de variables dependientes
falsos_positivos[num_vars] <- bingo / total_sim * 100
}
# Crear un dataframe para ggplot
df_resultados <- data.frame(
NumVariables = 1:10,
PorcentajeFalsosPositivos = falsos_positivos
)
# Gráfico del porcentaje de falsos positivos
ggplot(df_resultados, aes(x = NumVariables, y = PorcentajeFalsosPositivos)) +
geom_line() +
geom_point() +
labs(
title = "Porcentaje de Falsos Positivos en función del Número de Variables Dependientes",
x = "Número de Variables Dependientes",
y = "Porcentaje de Falsos Positivos"
) +
theme_minimal()
# Limpia la lista de objetos
rm(list = ls())
# Librerías necesarias
library(dplyr)
library(ggplot2)
# Definir número de observaciones y número total de simulaciones
num_obs <- 1000
total_sim <- 1000
# Vector para almacenar el porcentaje de falsos positivos para cada número de variables dependientes
falsos_positivos <- numeric(10)
for (num_vars in 1:10) {
bingo <- 0
for (simul in 1:total_sim) {
# Asignación de tratamiento aleatorio
u <- runif(num_obs)
tratamiento <- ifelse(rank(u) <= num_obs / 2, 1, 0)
# Generación de variables dependientes
vardep <- replicate(num_vars, qnorm(runif(num_obs)), simplify = FALSE)
# Comprobación de significancia en múltiples variables dependientes
significativo <- FALSE
for (v in vardep) {
reg <- lm(v ~ tratamiento)
if (summary(reg)$coefficients[2, 4] < 0.05) {
significativo <- TRUE
break
}
}
if (significativo) {
bingo <- bingo + 1
}
}
# Cálculo del porcentaje de falsos positivos para el número actual de variables dependientes
falsos_positivos[num_vars] <- bingo / total_sim * 100
}
# Crear un dataframe para ggplot
df_resultados <- data.frame(
NumVariables = 1:10,
PorcentajeFalsosPositivos = falsos_positivos
)
# Gráfico del porcentaje de falsos positivos
ggplot(df_resultados, aes(x = NumVariables, y = PorcentajeFalsosPositivos)) +
geom_line() +
geom_point() +
labs(
title = "Porcentaje de Falsos Positivos en función del Número de Variables Dependientes",
x = "Número de Variables Dependientes",
y = "Porcentaje de Falsos Positivos"
) +
theme_minimal()
# Gráfico del porcentaje de falsos positivos
ggplot(df_resultados, aes(x = NumVariables, y = PorcentajeFalsosPositivos)) +
geom_line() +
geom_point() +
labs(
title = "Porcentaje de Falsos Positivos en función del Número de Variables Dependientes",
x = "Número de Variables Dependientes",
y = "Porcentaje de Falsos Positivos"
) +
theme_minimal()
# Gráfico del porcentaje de falsos positivos
ggplot(df_resultados, aes(x = NumVariables, y = PorcentajeFalsosPositivos)) +
geom_line() +
geom_point() +
labs(
title = "Porcentaje de Falsos Positivos en función del Número de Variables Dependientes",
x = "Número de Variables Dependientes",
y = "Porcentaje de Falsos Positivos"
) +
theme_minimal()
# Instalar las bibliotecas necesarias si no las tienes
install.packages("haven")
install.packages("readxl")
# Cargar las bibliotecas
library(haven)
library(readxl)
# Importar el archivo .dta
data_dta <- read_dta("ruta/al/archivo.dta")
getwd()
# Instalar las bibliotecas necesarias si no las tienes
install.packages("haven")
install.packages("readxl")
# Cargar las bibliotecas
library(haven)
library(readxl)
# Importar el archivo .dta
data_dta <- read_dta("Casen 2022.dta")
install.packages("haven")
# Importar el archivo .dta
data_dta <- read_dta("Casen 2022.dta")
# Importar el archivo .xls
data_xls <- read_excel("tasa_de_natalidad.xls")
# Cargar las bibliotecas
library(haven)
library(readxl)
# Importar el archivo .dta
data_dta <- read_dta("Casen 2022.dta")
# Importar el archivo .xls
data_xls <- read_excel("tasa_de_natalidad.xls")
# Importar el archivo .xlsx
data_xlsx <- read_excel("censo2017.xlsx")
# Ver las primeras filas de cada base de datos
head(data_dta)
head(data_xls)
head(data_xlsx)
head(data_dta)
head(data_xls)
head(data_xlsx)
View(data_dta)
View(data_dta)
View(data_xls)
View(data_xls)
View(data_xlsx)
View(data_xlsx)
)
# Importar el archivo .xlsx
censo <- read_excel("censo2017.xlsx", sheet=2)
View(censo)
View(censo)
casen <- read_dta("Casen 2022.dta")
# Importar el archivo .xls
tasa_de_natalidad <- read_excel("tasa_de_natalidad.xls")
# Importar el archivo .xlsx
censo <- read_excel("cens
casen <- read_dta("Casen 2022.dta")
View(data_dta)
View(data_dta)
View(data_xls)
View(tasa_de_natalidad)
View(casen)
View(casen)
View(casen)
View(censo)
View(casen)
View(censo)
View(casen)
